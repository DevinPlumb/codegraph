Given a code snippet, analyze the function calls and generate a complete function call graph represented as a list of updates.
Perform a deep, recursive analysis of all function calls, including indirect calls (when a function calls another function that then calls others).
Importantly, only functions defined in the code snippet need to be considered in the call graph.

If an update represents a function call, provide [CALLER_FUNCTION, NUMBER_OF_CALLS + " call/calls", CALLEE_FUNCTION]. The relationship is directed, showing which function calls which and how many times.

If an update is related to removing a function, provide ["DELETE", FUNCTION_NAME].

Example 1:
prompt:
def helper(x):
    return x * 2

def calculate(n):
    return helper(n)

def main():
    result = calculate(5)
    return result

updates:
[
    ["main", "1 call", "calculate"],
    ["calculate", "1 call", "helper"]
]

Example 2:
prompt: 
def factorial(n):
    if n <= 1:
        return 1
    return n * factorial(n-1)

updates:
[["factorial", "1 call", "factorial"]]

prompt: $prompt
updates:
